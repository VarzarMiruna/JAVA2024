package home.dao;

import home.model.Book;
import home.util.ConnectionDB;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


public class BookDAO extends AbstractDAO<Book> {

    @Override
    protected String getTableName() {
        return "books";
    }

    protected Book mapResultSetToModel(ResultSet resultSet) throws SQLException {
        int id = resultSet.getInt("id");
        int publicationDate = resultSet.getInt("publicationdate");
        String title = resultSet.getString("title");
        int numberOfPages = resultSet.getInt("numberofpages");
        String language = resultSet.getString("language");
        String author = new AuthorDAO().findById(resultSet.getInt("author")).getName();

        //luam genurile pt carte din tabelul bookgenres
        List<String> genres = new ArrayList<>();
        try (PreparedStatement preparedStatement = ConnectionDB.getConnection().prepareStatement(
                "SELECT g.name " +
                        "FROM genres g " +
                        "JOIN bookgenres ag ON ag.genreid = g.id " +
                        "WHERE ag.bookid =" + id)) {
            try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                while (resultSet2.next()) {
                    genres.add(resultSet2.getString("name"));
                }
            }
        }
        return new Book(publicationDate, title, author, genres, numberOfPages, language);
    }

    @Override
    protected String createFieldInsertList() {

        return "publicationDate, title, author, numberOfPages, language";
    }

    @Override
    protected String createPlaceholderList() {

        return "?, ?, ?, ?, ?";
    }

    @Override
    protected void mapModelToPreparedStatement(PreparedStatement preparedStatement, Book object) throws SQLException {
        preparedStatement.setInt(1, object.getPublicationDate());
        preparedStatement.setString(2, object.getTitle());
        preparedStatement.setInt(3, new AuthorDAO().findByName(object.getAuthor()));
        preparedStatement.setInt(4, object.getNumberOfPages());
        preparedStatement.setString(5, object.getLanguage());
    }

    public void addGenresToBook(Book book) throws SQLException {
        int bookId = book.getId();
        List<String> genres = book.getGenres();
        if (genres != null && !genres.isEmpty()) {
            Connection connection = ConnectionDB.getConnection();
            for (String genre : genres) {
                Integer genreId = new GenreDAO().findByName(genre);
                if (genreId != null) {
                    try (PreparedStatement preparedStatement = connection.prepareStatement(
                            "INSERT INTO bookgenres (bookid, genreid) VALUES (?, ?)")) {
                        preparedStatement.setInt(1, bookId);
                        preparedStatement.setInt(2, genreId);
                        preparedStatement.executeUpdate();
                    }
                }
            }
        }
    }

    @Override
    public void create(Book object) throws SQLException {
        Connection connection = ConnectionDB.getConnection();
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                createInsertQuery(), Statement.RETURN_GENERATED_KEYS)) {
            mapModelToPreparedStatement(preparedStatement, object);
            // inserare
            preparedStatement.executeUpdate();
            // obtinem  ID generat
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                if (resultSet.next()) {
                    object.setId(resultSet.getInt(1));
                } else {
                    throw new SQLException("Model creation failed, no autogenerated ID obtained");
                }
            }
            addGenresToBook(object);
        }
    }


    /*public Integer findByName(String title) throws SQLException{
        Connection con = Database.getConnection();
        //title = title.replaceAll("\'", "''");
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(
                "select * from books where title='" + title + "'")) {
            return rs.next() ? rs.getInt(1) : null;
        }

    }

    public Book findById(int id) throws SQLException{
        Connection connection = Database.getConnection();
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(
                "select * from books where id=" + id)) {
            if(rs.next()){
                var book =new Book(id,rs.getString(2),rs.getString(3), Collections.singletonList(rs.getString(4)), rs.getInt(5), rs.getString(6));
                rs.close();
                connection.close();
                return book;
            }
            rs.close();
            connection.close();
            return null;
        }
    }*/


    public Book findById(int id) throws SQLException {
        String query = "SELECT * FROM books WHERE id = ?";
        try (Connection connection = ConnectionDB.getConnection();
             PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new Book(
                            id,
                            rs.getString("title"),
                            rs.getString("author"),
                            Collections.singletonList(rs.getString("genre")),
                            rs.getInt("numberOfPages"),
                            rs.getString("language")
                    );
                }
            }
        }
        return null;
    }

    public Integer findByName(String title) throws SQLException {
        String query = "SELECT id FROM books WHERE title = ?";
        try (Connection con = ConnectionDB.getConnection();
             PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, title);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next() ? rs.getInt("id") : null;
            }
        }
    }



}